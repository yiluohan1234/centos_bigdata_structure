#!/bin/bash
INSTALL_PATH=/home/vagrant/.apps
zk(){
    usage="Usage: $0 (start|stop|status)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            for i in {"hdp101","hdp102","hdp103"};
            do
                echo "-----$1 $i zookeeper-------"
                ssh $i "source /etc/profile;$INSTALL_PATH/zookeeper/bin/zkServer.sh start"
            done
            ;;
        stop)
            for i in {"hdp101","hdp102","hdp103"};
            do
                echo "------$1 $i zookeeper-------"
                ssh $i "source /etc/profile;$INSTALL_PATH/zookeeper/bin/zkServer.sh stop"
            done
            ;;
        status)
            for i in {"hdp101","hdp102","hdp103"};
            do
                echo "------$i status-------"
                ssh $i "source /etc/profile;$INSTALL_PATH/zookeeper/bin/zkServer.sh status"
            done
            ;;
        *)
            echo $usage
            ;;
    esac
}
#一键启动集群
kafka(){
    usage="Usage: $0 (start|stop)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            SIGNAL=${SIGNAL:-TERM}
            PIDS=$(ps ax | grep java | grep -i QuorumPeerMain | grep -v grep | awk '{print $1}')

            if [ -z "$PIDS" ]; then
                echo "Success to start zookeeper."
                zk start 
                echo "-----$1 $i start-------"
            else
                echo "Zookeeper has been started"
            fi
            for i in {"hdp101","hdp102","hdp103"};
            do
                echo "-----$1 $i kafka-------"
                ssh $i "source /etc/profile;$INSTALL_PATH/kafka/bin/kafka-server-start.sh -daemon $INSTALL_PATH/kafka/config/server.properties"
            done
            ;;
        stop)
            for j in {"hdp101","hdp102","hdp103"};
            do
                echo "-----$1 $j kafka-------"
                ssh $j  "kill -9 \$(ps ax |grep -i 'Kafka'| grep java| grep -v grep| awk '{print \$1}')"
            done
            ;;
        *)
            echo $usage
            ;;
    esac
}
dfs(){
    usage="Usage: $0 (start|stop)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            sh $INSTALL_PATH/hadoop/sbin/start-dfs.sh
            ;;
        stop)
            sh $INSTALL_PATH/hadoop/sbin/stop-dfs.sh
            ;;
        format)
            sh $INSTALL_PATH/hadoop/bin/hdfs namenode -format
            ;;
        *)
            echo $usage
            ;;
    esac
}
yarn(){
    usage="Usage: $0 (start|stop)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            sh $INSTALL_PATH/hadoop/sbin/start-yarn.sh
            ;;
        stop)
            sh $INSTALL_PATH/hadoop/sbin/stop-yarn.sh
            ;;
        *)
            echo $usage
            ;;
    esac
}

hadoop(){
    usage="Usage: $0 (start|stop)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            echo " =================== 启动 hadoop集群 ==================="
            echo " --------------- 启动 hdfs ---------------"
            ssh hdp101 "$INSTALL_PATH/hadoop/sbin/start-dfs.sh"
            echo " --------------- 启动 yarn ---------------"
            ssh hdp102 "$INSTALL_PATH/hadoop/sbin/start-yarn.sh"
            echo " --------------- 启动 historyserver ---------------"
            ssh hdp101 "$INSTALL_PATH/hadoop/bin/mapred --daemon start historyserver"
            ;;
        stop)
            echo " =================== 关闭 hadoop集群 ==================="
            echo " --------------- 关闭 historyserver ---------------"
            ssh hdp101 "$INSTALL_PATH/hadoop/bin/mapred --daemon stop historyserver"
            echo " --------------- 关闭 yarn ---------------"
            ssh hdp102 "$INSTALL_PATH/hadoop/sbin/stop-yarn.sh"
            echo " --------------- 关闭 hdfs ---------------"
            ssh hdp101 "$INSTALL_PATH/hadoop/sbin/stop-dfs.sh"
            ;;
        *)
            echo $usage
            ;;
    esac
}

spark(){
    usage="Usage(spark): $0 (start|stop)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            sh $INSTALL_PATH/spark/sbin/start-all.sh
            ;;
        stop)
            sh $INSTALL_PATH/spark/sbin/stop-all.sh
            ;;
        *)
            echo $usage
            ;;
    esac
}
flink(){
    usage="Usage(flink): $0 (start|stop)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            $INSTALL_PATH/flink/bin/start-cluster.sh
            ;;
        stop)
            $INSTALL_PATH/flink/bin/stop-cluster.sh
            ;;
        *)
            echo $usage
            ;;
    esac
}
hbase(){
    usage="Usage(hbase): $0 (start|stop)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            $INSTALL_PATH/hbase/bin/start-hbase.sh
            ;;
        stop)
            $INSTALL_PATH/hbase/bin/stop-hbase.sh
            ;;
        *)
            echo $usage
            ;;
    esac
}

kibana(){
    USAGE="Usage: $0 (start|stop|status)"
    PIDFILE=$INSTALL_PATH/kibana/kibana.pid
    LOGFILE=kibana-console_`date '+%Y-%m-%d'`.log

    case $1 in
        start)
            echo "Staring kibana..."
            nohup ${INSTALL_PATH}/kibana/bin/kibana > ${INSTALL_PATH}/kibana/logs/$LOGFILE 2>&1 &
            echo $! > $PIDFILE
            ;;
        stop)
            #ps -ef |grep kibana |grep -v grep |awk '{print $2}' |xargs kill
            #kill -9 $(ps -ef |grep kibana| grep -v grep| awk '{print $2}')
            if [ -f "$PIDFILE" ] ; then
                echo "Stoping kibana ..."    
                kill `cat $PIDFILE`
                sleep 1
                rm -rf $PIDFILE
                echo "Stop kibana success"
            else
                echo "kibana is not running"
                exit 0
            fi
            ;;
        status)
            if [ -f "$PIDFILE" ] ; then
                pid=`cat $PIDFILE`
                if [[ pid -gt 0 ]]
                then
                    echo "[$(date '+%Y-%m-%d %T')] kibana is running.( pid:$pid )"
                else
                    echo "[$(date '+%Y-%m-%d %T')] kibana is not running"
                fi
            else 
                echo "Kibana is not running"
            fi
            ;;
        *)
            echo $USAGE
            exit 1
            ;;
    esac
}

elasticsearch(){
    usage="Usage: $0 (start|stop|restart)"

    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            for i in {"hdp101","hdp102","hdp103"};
            do
                echo "-----$1 $i elasticsearch-------"
                ssh $i "source /etc/profile;$INSTALL_PATH/elasticsearch/bin/elasticsearch -d -p pid"
            done
            ;;
        stop)
            for j in {"hdp101","hdp102","hdp103"};
            do
                echo "-----$1 $j elasticsearch-------"
                ssh $j  "kill -9 \$(ps ax |grep -i 'elasticsearch'| grep java| grep -v grep| awk '{print \$1}')"
            done
            ;;
        restart)
            elasticsearch stop
            elasticsearch start
            ;;
        *)
            echo $usage
            ;;
    esac
}

redis(){
    #redis服务器监听的端口
    REDISPORT=6379
    
    #服务端所处位置
    EXEC=${INSTALL_PATH}/redis/bin/redis-server
    
    #客户端位置
    CLIEXEC=${INSTALL_PATH}/redis/bin/redis-cli
    
    #redis的PID文件位置，需要修改
    PIDFILE=${INSTALL_PATH}/redis/run/redis_${REDISPORT}.pid
    
    #redis的配置文件位置，需将${REDISPORT}修改为文件名
    CONF="${INSTALL_PATH}/redis/conf/redis.conf"
    
    case "$1" in
        start)
            if [ -f $PIDFILE ]
            then
                echo "$PIDFILE exists, process is already running or crashed"
            else
                echo "Starting Redis server..."
                $EXEC $CONF
            fi
            ;;
        stop)
            if [ ! -f $PIDFILE ]
            then
                echo "$PIDFILE does not exist, process is not running"
            else
                PID=$(cat $PIDFILE)
                echo "Stopping ..."
                $CLIEXEC -p $REDISPORT shutdown
                while [ -x /proc/${PID} ]
                do
                    echo "Waiting for Redis to shutdown ..."
                    sleep 1
                done
                echo "Redis stopped"
            fi
            ;;
        restart|force-reload)
            ${0} stop
            ${0} start
            ;;
        *)
            echo "Usage: /etc/init.d/redis {start|stop|restart|force-reload}"
            ;;
    esac
}

rt_logger(){
    usage="Usage: $0 (start|stop|restart)"

    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            for i in {"hdp101","hdp102","hdp103"};
            do
                echo "-----$1 $i rt_logger-------"
                ssh $i "nohup $INSTALL_PATH/java/bin/java -Xms32m -Xmx64m -jar /home/vagrant/rt_gmall/rt_logger/gmall2021-logger-0.0.1-SNAPSHOT.jar > /dev/null 2>&1 &"
                if [ $i == "hdp101" ];then
                    echo "============start NGINX============"
                    $INSTALL_PATH/nginx/sbin/nginx
                fi
            done
            #echo "============start NGINX============"
            #$INSTALL_PATH/nginx/sbin/nginx
            ;;
        stop)
            #echo "============NGINX============"
            #nginx -s stop
            for j in {"hdp101","hdp102","hdp103"};
            do
                echo "-----$1 $j rt_logger-------"
                ssh $j  "kill -9 \$(ps -ef|grep gmall2021-logger-0.0.1-SNAPSHOT.jar| grep -v grep| awk '{print \$2}')"
                if [ $j == "hdp101" ];then
                    echo "============NGINX============"
                    $INSTALL_PATH/nginx/sbin/nginx -s stop
                fi
            done
            ;;
        *)
            echo $usage
            ;;
    esac
}

canal(){
    usage="Usage: $0 (start|stop)"
 
    if [ $# -lt 1 ]; then
        echo $usage
        exit 1
    fi
    case $1 in
        start)
            sh $INSTALL_PATH/canal/bin/startup.sh
            ;;
        stop)
            sh $INSTALL_PATH/canal/bin/stop.sh
            ;;
        *)
            echo $usage
            ;;
    esac
}

Maxwell(){
    USAGE="Usage: $0 (start|stop|status)"
    PIDFILE=$INSTALL_PATH/maxwell/maxwell.pid

    case $1 in
        start)
            echo "Staring Maxwell ..."
            nohup ${INSTALL_PATH}/maxwell/bin/maxwell --config ${INSTALL_PATH}/maxwell/config.properties > /dev/null 2>&1 &
            echo $! > $PIDFILE
            ;;
        stop)
            if [ -f "$PIDFILE" ] ; then
                echo "Stoping Maxwell ..."    
                kill `cat $PIDFILE`
                sleep 1
                rm -rf $PIDFILE
                echo "Stop Maxwell success"
            else
                echo "Maxwell is not running"
                exit 0
            fi
            ;;
        status)
            if [ -f "$PIDFILE" ] ; then
                pid=`cat $PIDFILE`
                if [[ pid -gt 0 ]]
                then
                    echo "[$(date '+%Y-%m-%d %T')] Maxwell is running.( pid:$pid )"
                else
                    echo "[$(date '+%Y-%m-%d %T')] Maxwell is not running"
                fi
            else 
                echo "Maxwell is not running"
            fi
            ;;
        *)
            echo $USAGE
            exit 1
            ;;
    esac
}

hiveserver2(){
    USAGE="Usage: $0 (start|stop|status)"
    PIDFILE=$INSTALL_PATH/hive/hive.pid
    LOGFILE=hive-console_`date '+%Y-%m-%d'`.log

    case $1 in
        start)
            echo "Staring hiveserver2..."
            nohup ${INSTALL_PATH}/hive/bin/hive --service hiveserver2 >${INSTALL_PATH}/hive/logs/hiveServer2.log 2>&1 &
            #nohup ${INSTALL_PATH}/hive/bin/hive --service metastore >${INSTALL_PATH}/hive/logs/metastore.log 2>&1 &
            echo $! > $PIDFILE
            ;;
        stop)
            if [ -f "$PIDFILE" ] ; then
                echo "Stoping hiveserver2 ..."    
                kill `cat $PIDFILE`
                sleep 1
                rm -rf $PIDFILE
                echo "Stop hiveserver2 success"
            else
                echo "hiveserver2 is not running"
                exit 0
            fi
            ;;
        status)
            if [ -f "$PIDFILE" ] ; then
                pid=`cat $PIDFILE`
                if [[ pid -gt 0 ]]
                then
                    echo "[$(date '+%Y-%m-%d %T')] hiveserver2 is running.( pid:$pid )"
                else
                    echo "[$(date '+%Y-%m-%d %T')] hiveserver2 is not running"
                fi
            else 
                echo "hiveserver2 is not running"
            fi
            ;;
        *)
            echo $USAGE
            exit 1
            ;;
    esac
}

args()
{
    usage="Usage: $0 (dfs|yarn|zk|kafka|spark|flink|hbase|start|stop)"
 
    if [ $# -lt 2 ]; then
        echo $usage
        exit 1
    fi

    case $1 in
	  dfs)
		dfs $2
		;;
	  yarn)
		yarn $2
		;;
	  hadoop)
		hadoop $2
		;;
	  spark)
		spark $2
		;;
	  zk)
		zk $2
		;;
	  flink)
		flink $2
		;;
	  hbase)
		hbase $2
		;;
	  kafka)
		kafka $2
		;;
	  kibana)
		kibana $2
		;;
	  es)
		elasticsearch $2
		;;
	  redis)
		redis $2
		;;
	  logger)
		rt_logger $2
		;;
	  maxwell)
		Maxwell $2
		;;
	  canal)
		canal $2
		;;
	  hive)
		hiveserver2 $2
		;;
	  *)
		echo $usage
		;;
    esac
}
args $@

